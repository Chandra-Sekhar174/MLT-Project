<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Logistics - AI-Powered Transportation Platform</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .navbar {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 1rem 0;
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 1000;
        }

        .nav-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 2rem;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: bold;
            color: white;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            transition: color 0.3s;
        }

        .nav-links a:hover {
            color: #ffd700;
        }

        .hero {
            padding: 120px 2rem 60px;
            text-align: center;
            color: white;
        }

        .hero h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
            background: linear-gradient(45deg, #fff, #ffd700);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .hero p {
            font-size: 1.2rem;
            opacity: 0.9;
            max-width: 800px;
            margin: 0 auto;
        }

        .main-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 2rem;
        }

        .route-planner {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            padding: 2.5rem;
            margin-bottom: 3rem;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #333;
        }

        .form-group input, .form-group select {
            padding: 12px 16px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        .calculate-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 1.1rem;
            font-weight: 600;
            border-radius: 25px;
            cursor: pointer;
            transition: transform 0.3s, box-shadow 0.3s;
            display: block;
            margin: 0 auto;
        }

        .calculate-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.4);
        }

        .results-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 2rem;
            margin-top: 3rem;
        }

        .result-card {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }

        .result-card.show {
            opacity: 1;
            transform: translateY(0);
        }

        .result-card h3 {
            color: #333;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .icon {
            width: 24px;
            height: 24px;
            fill: #667eea;
        }

        .metric {
            display: flex;
            justify-content: space-between;
            margin: 0.8rem 0;
            padding: 0.5rem 0;
            border-bottom: 1px solid #eee;
        }

        .metric:last-child {
            border-bottom: none;
        }

        .metric-label {
            color: #666;
            font-weight: 500;
        }

        .metric-value {
            color: #333;
            font-weight: 600;
        }

        .insights-section {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            margin: 2rem 0;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        }

        .insights-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-top: 1.5rem;
        }

        .insight-card {
            background: linear-gradient(135deg, #f8f9ff 0%, #e8edff 100%);
            padding: 1.5rem;
            border-radius: 10px;
            border-left: 4px solid #667eea;
        }

        .insight-title {
            font-weight: 600;
            color: #333;
            margin-bottom: 0.5rem;
        }

        .insight-text {
            color: #666;
            line-height: 1.6;
        }

        .real-time-data {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            margin: 2rem 0;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        }

        .data-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-top: 1.5rem;
        }

        .data-point {
            text-align: center;
            padding: 1rem;
            background: linear-gradient(135deg, #fff 0%, #f8f9ff 100%);
            border-radius: 10px;
            border: 1px solid #e1e5e9;
        }

        .data-value {
            font-size: 2rem;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 0.5rem;
        }

        .data-label {
            color: #666;
            font-size: 0.9rem;
        }

        .loading {
            display: none;
            justify-content: center;
            align-items: center;
            margin: 2rem 0;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #e1e5e9;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .footer {
            background: rgba(0, 0, 0, 0.8);
            color: white;
            text-align: center;
            padding: 2rem;
            margin-top: 4rem;
        }

        @media (max-width: 768px) {
            .hero h1 {
                font-size: 2rem;
            }
            
            .form-grid {
                grid-template-columns: 1fr;
            }
            
            .results-container {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <div class="logo">🚚 Smart Logistics</div>
            <div class="nav-links">
                <a href="#route">Route Planner</a>
                <a href="#analytics">Analytics</a>
                <a href="#iot">IoT Data</a>
                <a href="#ai">AI Insights</a>
            </div>
        </div>
    </nav>

    <section class="hero">
        <h1>Transportation and Logistics</h1>
        <p>Revolutionizing transportation in India with intelligent route planning, real-time tracking, and predictive analytics. Reduce costs, improve efficiency, and minimize environmental impact.</p>
    </section>

    <main class="main-container">
        <div class="route-planner" id="route">
            <h2 style="text-align: center; margin-bottom: 2rem; color: #333;">Route Optimization & Cost Prediction</h2>
            
            <div class="form-grid">
                <div class="form-group">
                    <label for="origin">Starting Location</label>
                    <input type="text" id="origin" placeholder="Enter origin city (e.g., Mumbai, Delhi)" required>
                </div>
                
                <div class="form-group">
                    <label for="destination">Destination</label>
                    <input type="text" id="destination" placeholder="Enter destination city (e.g., Bangalore, Chennai)" required>
                </div>
                
                <div class="form-group">
                    <label for="vehicle-type">Vehicle Type</label>
                    <select id="vehicle-type" required>
                        <option value="">Select Vehicle Type</option>
                        <option value="truck">Heavy Truck (>10 tons)</option>
                        <option value="medium-truck">Medium Truck (3-10 tons)</option>
                        <option value="light-truck">Light Truck (<3 tons)</option>
                        <option value="van">Commercial Van</option>
                        <option value="bike">Two-wheeler</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="cargo-weight">Cargo Weight (kg)</label>
                    <input type="number" id="cargo-weight" placeholder="Enter weight in kg" min="1" required>
                </div>
                
                <div class="form-group">
                    <label for="priority">Delivery Priority</label>
                    <select id="priority" required>
                        <option value="">Select Priority</option>
                        <option value="express">Express (Same Day)</option>
                        <option value="fast">Fast (1-2 Days)</option>
                        <option value="standard">Standard (3-5 Days)</option>
                        <option value="economy">Economy (5-7 Days)</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="departure-time">Preferred Departure Time</label>
                    <input type="datetime-local" id="departure-time" required>
                </div>
            </div>
            
            <button class="calculate-btn" onclick="calculateRoute()">
                🔍 Analyze Route & Predict Costs
            </button>
        </div>

        <div class="loading" id="loading">
            <div class="spinner"></div>
            <span style="margin-left: 1rem; color: white;">Processing with AI algorithms...</span>
        </div>

        <div class="results-container" id="results" style="display: none;"></div>
        
        <div class="real-time-data" id="iot-data" style="display: none;">
            <h3 style="color: #333; margin-bottom: 1rem;">🌐 Real-Time IoT Data Analytics</h3>
            <div class="data-grid" id="iot-grid"></div>
        </div>

        <div class="insights-section" id="ai-insights" style="display: none;">
            <h3 style="color: #333; margin-bottom: 1rem;">🤖 AI-Powered Insights & Recommendations</h3>
            <div class="insights-grid" id="insights-grid"></div>
        </div>
    </main>

    <footer class="footer">
        <p>&copy; 2025 Smart Logistics Platform. Powered by AI, IoT, and Advanced Data Analytics.</p>
    </footer>

    <script>
        // Simulated AI/ML models and IoT data
        const cityCoordinates = {
            'mumbai': { lat: 19.0760, lng: 72.8777 },
            'delhi': { lat: 28.6139, lng: 77.2090 },
            'bangalore': { lat: 12.9716, lng: 77.5946 },
            'chennai': { lat: 13.0827, lng: 80.2707 },
            'kolkata': { lat: 22.5726, lng: 88.3639 },
            'hyderabad': { lat: 17.3850, lng: 78.4867 },
            'pune': { lat: 18.5204, lng: 73.8567 },
            'ahmedabad': { lat: 23.0225, lng: 72.5714 },
            'jaipur': { lat: 26.9124, lng: 75.7873 },
            'lucknow': { lat: 26.8467, lng: 80.9462 }
        };

        const vehicleSpecs = {
            'truck': { fuelEfficiency: 4.5, costPerKm: 25, capacity: 15000, speedFactor: 0.9 },
            'medium-truck': { fuelEfficiency: 6.2, costPerKm: 18, capacity: 6500, speedFactor: 1.0 },
            'light-truck': { fuelEfficiency: 8.5, costPerKm: 12, capacity: 2500, speedFactor: 1.1 },
            'van': { fuelEfficiency: 12.0, costPerKm: 8, capacity: 1000, speedFactor: 1.2 },
            'bike': { fuelEfficiency: 40.0, costPerKm: 3, capacity: 50, speedFactor: 1.3 }
        };

        // AI-powered route calculation algorithm
        function calculateRoute() {
            const origin = document.getElementById('origin').value.toLowerCase().trim();
            const destination = document.getElementById('destination').value.toLowerCase().trim();
            const vehicleType = document.getElementById('vehicle-type').value;
            const cargoWeight = parseFloat(document.getElementById('cargo-weight').value);
            const priority = document.getElementById('priority').value;
            const departureTime = document.getElementById('departure-time').value;

            if (!origin || !destination || !vehicleType || !cargoWeight || !priority || !departureTime) {
                alert('Please fill in all required fields');
                return;
            }

            showLoading();
            
            // Simulate AI processing delay
            setTimeout(() => {
                const results = performAIAnalysis(origin, destination, vehicleType, cargoWeight, priority, departureTime);
                displayResults(results);
                generateIoTData();
                generateAIInsights(results);
                hideLoading();
            }, 2000);
        }

        function performAIAnalysis(origin, destination, vehicleType, cargoWeight, priority, departureTime) {
            // Advanced AI route optimization algorithm
            const originCoords = cityCoordinates[origin];
            const destCoords = cityCoordinates[destination];
            
            if (!originCoords || !destCoords) {
                alert('City not found in database. Please check spelling.');
                return null;
            }

            // Calculate distance using Haversine formula
            const distance = calculateDistance(originCoords, destCoords);
            
            // AI-powered traffic prediction model
            const trafficFactor = predictTrafficConditions(origin, destination, departureTime);
            
            // Machine learning cost optimization
            const vehicleSpec = vehicleSpecs[vehicleType];
            const adjustedDistance = distance * (1 + Math.random() * 0.1 - 0.05); // Route variation
            
            // Time prediction with AI traffic analysis
            const baseTime = (adjustedDistance / 65) * vehicleSpec.speedFactor; // Base speed 65 km/h
            const adjustedTime = baseTime * trafficFactor;
            
            // Multi-factor cost calculation
            const fuelCost = (adjustedDistance / vehicleSpec.fuelEfficiency) * 90; // ₹90/liter
            const driverCost = adjustedTime * 200; // ₹200/hour
            const tollCost = adjustedDistance * 0.8; // ₹0.8/km average
            const maintenanceCost = adjustedDistance * vehicleSpec.costPerKm * 0.3;
            
            // Priority-based adjustments
            const priorityMultiplier = {
                'express': 1.8,
                'fast': 1.4,
                'standard': 1.0,
                'economy': 0.8
            };
            
            const totalCost = (fuelCost + driverCost + tollCost + maintenanceCost) * priorityMultiplier[priority];
            
            // Carbon footprint calculation
            const carbonEmission = (adjustedDistance / vehicleSpec.fuelEfficiency) * 2.68; // kg CO2
            
            // AI efficiency scoring
            const efficiencyScore = calculateEfficiencyScore(vehicleType, cargoWeight, distance, priority);
            
            return {
                distance: adjustedDistance,
                time: adjustedTime,
                cost: totalCost,
                fuelCost: fuelCost,
                carbonEmission: carbonEmission,
                efficiencyScore: efficiencyScore,
                trafficCondition: getTrafficCondition(trafficFactor),
                optimalDeparture: suggestOptimalDeparture(departureTime),
                alternativeRoutes: generateAlternativeRoutes(distance, adjustedTime, totalCost)
            };
        }

        function calculateDistance(coord1, coord2) {
            const R = 6371; // Earth's radius in km
            const dLat = (coord2.lat - coord1.lat) * Math.PI / 180;
            const dLng = (coord2.lng - coord1.lng) * Math.PI / 180;
            const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                      Math.cos(coord1.lat * Math.PI / 180) * Math.cos(coord2.lat * Math.PI / 180) *
                      Math.sin(dLng/2) * Math.sin(dLng/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return R * c;
        }

        function predictTrafficConditions(origin, destination, departureTime) {
            const hour = new Date(departureTime).getHours();
            const dayOfWeek = new Date(departureTime).getDay();
            
            // AI traffic prediction model
            let trafficFactor = 1.0;
            
            // Rush hour adjustments
            if ((hour >= 7 && hour <= 10) || (hour >= 17 && hour <= 20)) {
                trafficFactor += 0.4;
            }
            
            // Weekend adjustments
            if (dayOfWeek === 0 || dayOfWeek === 6) {
                trafficFactor -= 0.2;
            }
            
            // Major city adjustments
            if (['mumbai', 'delhi', 'bangalore'].includes(origin) || 
                ['mumbai', 'delhi', 'bangalore'].includes(destination)) {
                trafficFactor += 0.3;
            }
            
            return Math.max(0.8, Math.min(2.5, trafficFactor));
        }

        function calculateEfficiencyScore(vehicleType, cargoWeight, distance, priority) {
            const vehicleSpec = vehicleSpecs[vehicleType];
            const capacityUtilization = Math.min(cargoWeight / vehicleSpec.capacity, 1.0);
            const distanceEfficiency = Math.min(distance / 1000, 1.0); // Normalized to 1000km
            const priorityEfficiency = priority === 'standard' ? 1.0 : 0.8;
            
            return Math.round((capacityUtilization * 0.4 + distanceEfficiency * 0.3 + 
                             vehicleSpec.fuelEfficiency / 40 * 0.3) * priorityEfficiency * 100);
        }

        function getTrafficCondition(factor) {
            if (factor < 1.2) return 'Light';
            if (factor < 1.6) return 'Moderate';
            if (factor < 2.0) return 'Heavy';
            return 'Very Heavy';
        }

        function suggestOptimalDeparture(departureTime) {
            const date = new Date(departureTime);
            const optimalHour = Math.random() < 0.5 ? 5 : 23; // Early morning or late night
            date.setHours(optimalHour, 0, 0, 0);
            return date.toLocaleString();
        }

        function generateAlternativeRoutes(baseDistance, baseTime, baseCost) {
            return [
                {
                    name: 'Highway Route',
                    distance: baseDistance * 0.95,
                    time: baseTime * 0.9,
                    cost: baseCost * 1.1
                },
                {
                    name: 'Economic Route',
                    distance: baseDistance * 1.15,
                    time: baseTime * 1.25,
                    cost: baseCost * 0.85
                },
                {
                    name: 'Scenic Route',
                    distance: baseDistance * 1.3,
                    time: baseTime * 1.4,
                    cost: baseCost * 0.9
                }
            ];
        }

        function displayResults(results) {
            if (!results) return;
            
            const resultsContainer = document.getElementById('results');
            resultsContainer.innerHTML = `
                <div class="result-card">
                    <h3>📍 Route Analysis</h3>
                    <div class="metric">
                        <span class="metric-label">Total Distance</span>
                        <span class="metric-value">${results.distance.toFixed(1)} km</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Estimated Time</span>
                        <span class="metric-value">${formatTime(results.time)}</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Traffic Condition</span>
                        <span class="metric-value">${results.trafficCondition}</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Optimal Departure</span>
                        <span class="metric-value">${results.optimalDeparture}</span>
                    </div>
                </div>
                
                <div class="result-card">
                    <h3>💰 Cost Analysis</h3>
                    <div class="metric">
                        <span class="metric-label">Total Cost</span>
                        <span class="metric-value">₹${results.cost.toFixed(0)}</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Fuel Cost</span>
                        <span class="metric-value">₹${results.fuelCost.toFixed(0)}</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Cost per km</span>
                        <span class="metric-value">₹${(results.cost/results.distance).toFixed(2)}</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Efficiency Score</span>
                        <span class="metric-value">${results.efficiencyScore}%</span>
                    </div>
                </div>
                
                <div class="result-card">
                    <h3>🌱 Environmental Impact</h3>
                    <div class="metric">
                        <span class="metric-label">CO2 Emissions</span>
                        <span class="metric-value">${results.carbonEmission.toFixed(2)} kg</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Carbon per km</span>
                        <span class="metric-value">${(results.carbonEmission/results.distance).toFixed(3)} kg/km</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Eco Rating</span>
                        <span class="metric-value">${getEcoRating(results.carbonEmission/results.distance)}</span>
                    </div>
                </div>
                
                <div class="result-card">
                    <h3>🛣️ Alternative Routes</h3>
                    ${results.alternativeRoutes.map(route => `
                        <div class="metric">
                            <span class="metric-label">${route.name}</span>
                            <span class="metric-value">${route.distance.toFixed(0)}km, ${formatTime(route.time)}, ₹${route.cost.toFixed(0)}</span>
                        </div>
                    `).join('')}
                </div>
            `;
            
            resultsContainer.style.display = 'grid';
            setTimeout(() => {
                resultsContainer.querySelectorAll('.result-card').forEach((card, index) => {
                    setTimeout(() => card.classList.add('show'), index * 200);
                });
            }, 100);
        }

        function generateIoTData() {
            const iotData = [
                { label: 'Active Vehicles', value: Math.floor(Math.random() * 1000) + 500, unit: '' },
                { label: 'Avg Speed', value: Math.floor(Math.random() * 30) + 45, unit: 'km/h' },
                { label: 'Fuel Efficiency', value: (Math.random() * 5 + 8).toFixed(1), unit: 'km/l' },
                { label: 'Temperature', value: Math.floor(Math.random() * 15) + 25, unit: '°C' },
                { label: 'Traffic Density', value: Math.floor(Math.random() * 60) + 20, unit: '%' },
                { label: 'Route Compliance', value: Math.floor(Math.random() * 20) + 80, unit: '%' }
            ];
            
            const iotGrid = document.getElementById('iot-grid');
            iotGrid.innerHTML = iotData.map(data => `
                <div class="data-point">
                    <div class="data-value">${data.value}${data.unit}</div>
                    <div class="data-label">${data.label}</div>
                </div>
            `).join('');
            
            document.getElementById('iot-data').style.display = 'block';
        }

        function generateAIInsights(results) {
            const insights = [
                {
                    title: 'Route Optimization',
                    text: `AI analysis suggests ${results.trafficCondition.toLowerCase()} traffic conditions. Consider departing at ${results.optimalDeparture} for 15-20% time savings.`
                },
                {
                    title: 'Cost Efficiency',
                    text: `Current efficiency score: ${results.efficiencyScore}%. Vehicle utilization can be improved by consolidating loads or choosing alternative vehicle types.`
                },
                {
                    title: 'Environmental Impact',
                    text: `This route generates ${results.carbonEmission.toFixed(2)} kg CO2. Switching to electric or hybrid vehicles could reduce emissions by up to 40%.`
                },
                {
                    title: 'Predictive Maintenance',
                    text: 'Based on distance and vehicle type, schedule maintenance check after this trip. IoT sensors indicate optimal tire pressure and engine performance.'
                },
                {
                    title: 'Risk Assessment',
                    text: 'Weather conditions and traffic patterns suggest low-risk journey. Real-time monitoring will provide updates on route deviations.'
                },
                {
                    title: 'Load Optimization',
                    text: 'Current load utilization allows for additional cargo pickup along the route, potentially reducing cost per unit by 12%.'
                }
            ];
            
            const insightsGrid = document.getElementById('insights-grid');
            insightsGrid.innerHTML = insights.map(insight => `
                <div class="insight-card">
                    <div class="insight-title">${insight.title}</div>
                    <div class="insight-text">${insight.text}</div>
                </div>
            `).join('');
            
            document.getElementById('ai-insights').style.display = 'block';
        }

        function formatTime(hours) {
            const h = Math.floor(hours);
            const m = Math.round((hours - h) * 60);
            return `${h}h ${m}m`;
        }

        function getEcoRating(carbonPerKm) {
            if (carbonPerKm < 0.1) return 'Excellent';
            if (carbonPerKm < 0.2) return 'Good';
            if (carbonPerKm < 0.3) return 'Average';
            if (carbonPerKm < 0.5) return 'Poor';
            return 'Very Poor';
        }

        function showLoading() {
            document.getElementById('loading').style.display = 'flex';
            document.getElementById('results').style.display = 'none';
            document.getElementById('iot-data').style.display = 'none';
            document.getElementById('ai-insights').style.display = 'none';
        }

        function hideLoading() {
            document.getElementById('loading').style.display = 'none';
        }

        // Initialize with current date/time
        document.addEventListener('DOMContentLoaded', function() {
            const now = new Date();
            now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
            document.getElementById('departure-time').value = now.toISOString().slice(0, 16);
        });

        // Real-time IoT data simulation
        setInterval(() => {
            if (document.getElementById('iot-data').style.display === 'block') {
                generateIoTData();
            }
        }, 5000);
    </script>
</body>
</html>
